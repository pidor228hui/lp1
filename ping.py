import time

from vkbottle.rule import FromMe
from vkbottle.user import Blueprint, Message

from logger import logger_decorator
from utils import edit_message

user = Blueprint(
    name='ping_blueprint'
)


async def get_ping(message: Message, answer: str) -> str:
    delta = round(time.time() - message.date, 2)

    # –ê —Ç—ã –¥—É–º–∞–ª —Ç—É—Ç –≤—Å–µ —á–µ—Å–Ω–æ –±—É–¥–µ—Ç? –ù–µ, —è —Ç–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞—é...
    if delta < 0:
        delta = "666"

    return f"{answer} –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –õ–ü\n" \
           f"–°–µ—Ä–≤–µ—Ä –û—Ç–≤–µ—Ç–∏–ª –ß–µ—Ä–µ–∑: {delta}–°–µ–∫—É–Ω–¥–æ—á–µ–∫üòò"


@user.on.message_handler(FromMe(), text="<prefix:service_prefix> –ø–∏–Ω–≥")
@logger_decorator
async def ping_wrapper(message: Message, **kwargs):
    await edit_message(
        message,
        await get_ping(message, "–•—É–∏–Ω–≥–ë–ª—è—Ç—åüòá")
    )


@user.on.message_handler(FromMe(), text="<prefix:service_prefix> –ø–∏—É")
@logger_decorator
async def pau_wrapper(message: Message, **kwargs):
    await edit_message(
        message,
        await get_ping(message, "—Ö—É–∏—É –±–ª—è—Ç—åüñï")
    )


@user.on.message_handler(FromMe(), text="<prefix:service_prefix> –∫–∏–Ω–≥")
@logger_decorator
async def king_wrapper(message: Message, **kwargs):
    await edit_message(
        message,
        await get_ping(message, "–•—É–∏–Ω–≥üòà")
    )
